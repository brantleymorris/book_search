{"ast":null,"code":"var _jsxFileName = \"/Users/brantleymorris/Documents/BC_Classwork/book_search/client/src/components/BookCard/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"../Grid\";\nimport { List, ListItem } from \"../List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookCard = () => {\n  _s();\n\n  const [books, setBooks] = useState(undefined);\n\n  const getBooks = async () => {\n    const response = await API.getBooks();\n    console.log(response.data);\n    setBooks(response.data);\n  };\n\n  const deleteBook = async id => {\n    const response = await API.deleteBook(id);\n    console.log(response.data);\n    setBooks(response.data);\n  }; // think I need to add books to the array here so that it will reload when book is removed\n\n\n  useEffect(() => {\n    getBooks();\n  }, []);\n  return (// TODO - add button to remove book\n    //      - add button to link to book site\n    // <h1>Test</h1>\n    books ? books.map(result => /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [result.image ? /*#__PURE__*/_jsxDEV(Col, {\n            size: \"md-3\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(Col, {\n            size: \"md-3\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No image found.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            size: \"md-9\",\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [result.title, \" by \", result.author]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this), result.description ? /*#__PURE__*/_jsxDEV(Row, {\n                children: result.description.substring(0, 250)\n                /*only load 250 characters*/\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(Row, {\n                children: \"No description available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 41\n              }, this), result.link ? /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  href: result.link,\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn\",\n                    children: \"View\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn\",\n                  onClick: () => {\n                    deleteBook(result._id);\n                  },\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No link found.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)\n    }, result._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No books have been saved.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  );\n};\n\n_s(BookCard, \"ZI7D7+vMDcgFqb6w/iOaFoRbOXw=\");\n\n_c = BookCard;\nexport default BookCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookCard\");","map":{"version":3,"sources":["/Users/brantleymorris/Documents/BC_Classwork/book_search/client/src/components/BookCard/index.js"],"names":["React","useState","useEffect","API","Container","Row","Col","List","ListItem","BookCard","books","setBooks","undefined","getBooks","response","console","log","data","deleteBook","id","map","result","image","title","author","description","substring","link","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,SAApC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,SAA/B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACW,SAAD,CAAlC;;AAEA,QAAMC,QAAQ,GAAG,YAAY;AACzB,UAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACU,QAAJ,EAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,IAAAA,QAAQ,CAACG,QAAQ,CAACG,IAAV,CAAR;AACH,GAJD;;AAMA,QAAMC,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B,UAAML,QAAQ,GAAG,MAAMX,GAAG,CAACe,UAAJ,CAAeC,EAAf,CAAvB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,IAAAA,QAAQ,CAACG,QAAQ,CAACG,IAAV,CAAR;AACH,GAJD,CAVmB,CAgBnB;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,SAEJ;AACA;AAGQ;AAEAH,IAAAA,KAAK,GACDA,KAAK,CAACU,GAAN,CAAUC,MAAM,iBACZ,QAAC,QAAD;AAAA,6BACI,QAAC,SAAD;AAAA,+BACI,QAAC,GAAD;AAAA,qBACMA,MAAM,CAACC,KAAP,gBACE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAC,MAAV;AAAA,mCACI;AAAK,cAAA,GAAG,EAAED,MAAM,CAACC;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADF,gBAIE,QAAC,GAAD;AAAK,YAAA,IAAI,EAAC,MAAV;AAAA,mCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBALR,eAUI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAC,MAAV;AAAA,mCACI,QAAC,SAAD;AAAA,sCACI,QAAC,GAAD;AAAA,uCACI;AAAA,6BACKD,MAAM,CAACE,KADZ,UACuBF,MAAM,CAACG,MAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,EAMKH,MAAM,CAACI,WAAP,gBACG,QAAC,GAAD;AAAA,0BACKJ,MAAM,CAACI,WAAP,CAAmBC,SAAnB,CAA6B,CAA7B,EAA+B,GAA/B;AAAoC;;AADzC;AAAA;AAAA;AAAA;AAAA,sBADH,gBAKG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXR,EAeKL,MAAM,CAACM,IAAP,gBACG,QAAC,GAAD;AAAA,wCACI;AAAG,kBAAA,IAAI,EAAEN,MAAM,CAACM,IAAhB;AAAA,yCACI;AAAQ,oBAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAQ,kBAAA,SAAS,EAAC,KAAlB;AAAwB,kBAAA,OAAO,EAAE,MAAM;AAACT,oBAAAA,UAAU,CAACG,MAAM,CAACO,GAAR,CAAV;AAAuB,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,gBAWG,QAAC,GAAD;AAAA,uCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,OAAeP,MAAM,CAACO,GAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,CADC,gBAoDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5DR;AA+DH,CApFD;;GAAMnB,Q;;KAAAA,Q;AAsFN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"../Grid\";\nimport { List, ListItem } from \"../List\";\n\nconst BookCard = () => {\n\n    const [books, setBooks] = useState(undefined);\n\n    const getBooks = async () => {\n        const response = await API.getBooks();\n        console.log(response.data);\n        setBooks(response.data);\n    };\n\n    const deleteBook = async (id) => {\n        const response = await API.deleteBook(id);\n        console.log(response.data);\n        setBooks(response.data);\n    };\n\n    // think I need to add books to the array here so that it will reload when book is removed\n    useEffect(() => {\n        getBooks();\n    }, []);\n\n    return (\n\n// TODO - add button to remove book\n//      - add button to link to book site\n\n\n        // <h1>Test</h1>\n\n        books ? (\n            books.map(result =>\n                <ListItem key={result._id}>\n                    <Container>\n                        <Row>\n                            { result.image ? (\n                                <Col size=\"md-3\">\n                                    <img src={result.image} />\n                                </Col> ) : (\n                                <Col size=\"md-3\">\n                                    <p>No image found.</p>\n                                </Col>\n                            )\n                            }\n                            <Col size=\"md-9\">\n                                <Container>\n                                    <Row>\n                                        <strong>\n                                            {result.title} by {result.author}\n                                        </strong>\n                                    </Row>\n                                    {result.description ? (\n                                        <Row>\n                                            {result.description.substring(0,250) /*only load 250 characters*/} \n                                        </Row>\n                                        ) : (\n                                        <Row>\n                                            No description available.    \n                                        </Row>\n                                    )}\n                                    {result.link ? (\n                                        <Row>\n                                            <a href={result.link}>\n                                                <button className=\"btn\">\n                                                    View\n                                                </button>\n                                            </a>\n                                            <button className=\"btn\" onClick={() => {deleteBook(result._id)}}>\n                                                Remove\n                                            </button> \n                                        </Row>) : (\n                                        <Row>\n                                            <p>No link found.</p>\n                                        </Row>\n                                        )}\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                </ListItem>\n            )\n        ) : (\n            <h3>No books have been saved.</h3>\n        ) \n    );\n};\n\nexport default BookCard;"]},"metadata":{},"sourceType":"module"}