{"ast":null,"code":"var _jsxFileName = \"/Users/brantleymorris/Documents/BC_Classwork/book_search/client/src/components/BookCard/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"../Grid\";\nimport { List, ListItem } from \"../List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookCard = () => {\n  _s();\n\n  var books;\n  console.log(books); // undefined, expected\n  // TODO - add useEffect to get books (API.findAll) on load ([])\n  // const getBooks = async () => {\n  //     const response = await API.getBooks();\n  //     books = response.data;\n  //     return books;\n  // };\n  // books are not loaded by the time the page tries to render\n  // and the page never checks to see if books excist\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const response = await API.getBooks();\n      books = response.data;\n      console.log(books);\n      return books; // books = await getBooks();\n      // console.log(books); // getting information from db correctly\n    };\n\n    getBooks();\n  }, []);\n  return (// TODO - remove state and get data from db (done)\n    //      - add button to remove book\n    //      - add button to link to book site\n    //      - update to reflect saved books instead of posts (done)\n    // <h1>Test</h1>\n    books ? books.map(result => /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            size: \"md-3\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result.imageLinks.smallThumbnail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            size: \"md-9\",\n            children: /*#__PURE__*/_jsxDEV(Container, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [result.title, \" by \", result.author]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 37\n              }, this), result.description ? /*#__PURE__*/_jsxDEV(Row, {\n                children: result.description.substring(0, 250)\n                /*only load 250 characters*/\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(Row, {\n                children: \"No description available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, result._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No books have been saved.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  );\n};\n\n_s(BookCard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BookCard;\nexport default BookCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookCard\");","map":{"version":3,"sources":["/Users/brantleymorris/Documents/BC_Classwork/book_search/client/src/components/BookCard/index.js"],"names":["React","useEffect","API","Container","Row","Col","List","ListItem","BookCard","books","console","log","getBooks","response","data","map","result","imageLinks","smallThumbnail","title","author","description","substring","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,SAApC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,SAA/B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,MAAIC,KAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAHmB,CAGC;AAEpB;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,QAAQ,GAAG,YAAY;AACzB,YAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACU,QAAJ,EAAvB;AACAH,MAAAA,KAAK,GAAGI,QAAQ,CAACC,IAAjB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOA,KAAP,CAJyB,CAKzB;AACA;AACH,KAPD;;AAQAG,IAAAA,QAAQ;AACX,GAVQ,EAUN,EAVM,CAAT;AAYA,SAEJ;AACA;AACA;AACA;AAEQ;AAEAH,IAAAA,KAAK,GACDA,KAAK,CAACM,GAAN,CAAUC,MAAM,iBACZ,QAAC,QAAD;AAAA,6BACI,QAAC,SAAD;AAAA,+BACI,QAAC,GAAD;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAC,MAAV;AAAA,mCACI;AAAK,cAAA,GAAG,EAAEA,MAAM,CAACC,UAAP,CAAkBC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,GAAD;AAAK,YAAA,IAAI,EAAC,MAAV;AAAA,mCACI,QAAC,SAAD;AAAA,sCACI,QAAC,GAAD;AAAA,uCACI;AAAA,6BACKF,MAAM,CAACG,KADZ,UACuBH,MAAM,CAACI,MAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,EAMKJ,MAAM,CAACK,WAAP,gBACG,QAAC,GAAD;AAAA,0BACKL,MAAM,CAACK,WAAP,CAAmBC,SAAnB,CAA6B,CAA7B,EAA+B,GAA/B;AAAoC;;AADzC;AAAA;AAAA;AAAA;AAAA,sBADH,gBAKG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,OAAeN,MAAM,CAACO,GAAtB;AAAA;AAAA;AAAA;AAAA,YADJ,CADC,gBA+BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxCR;AA2CH,CAtED;;GAAMf,Q;;KAAAA,Q;AAwEN,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport { Container, Row, Col } from \"../Grid\";\nimport { List, ListItem } from \"../List\";\n\nconst BookCard = () => {\n\n    var books;\n    console.log(books); // undefined, expected\n\n    // TODO - add useEffect to get books (API.findAll) on load ([])\n\n    // const getBooks = async () => {\n    //     const response = await API.getBooks();\n    //     books = response.data;\n    //     return books;\n    // };\n\n    // books are not loaded by the time the page tries to render\n    // and the page never checks to see if books excist\n    useEffect(() => {\n        const getBooks = async () => {\n            const response = await API.getBooks();\n            books = response.data;\n            console.log(books);\n            return books;\n            // books = await getBooks();\n            // console.log(books); // getting information from db correctly\n        }\n        getBooks();\n    }, []);\n\n    return (\n\n// TODO - remove state and get data from db (done)\n//      - add button to remove book\n//      - add button to link to book site\n//      - update to reflect saved books instead of posts (done)\n\n        // <h1>Test</h1>\n\n        books ? (\n            books.map(result =>\n                <ListItem key={result._id}>\n                    <Container>\n                        <Row>\n                            <Col size=\"md-3\">\n                                <img src={result.imageLinks.smallThumbnail} />\n                            </Col>\n                            <Col size=\"md-9\">\n                                <Container>\n                                    <Row>\n                                        <strong>\n                                            {result.title} by {result.author}\n                                        </strong>\n                                    </Row>\n                                    {result.description ? (\n                                        <Row>\n                                            {result.description.substring(0,250) /*only load 250 characters*/} \n                                        </Row>\n                                        ) : (\n                                        <Row>\n                                            No description available.    \n                                        </Row>\n                                    )}\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                </ListItem>\n            )\n        ) : (\n            <h3>No books have been saved.</h3>\n        ) \n    );\n};\n\nexport default BookCard;"]},"metadata":{},"sourceType":"module"}